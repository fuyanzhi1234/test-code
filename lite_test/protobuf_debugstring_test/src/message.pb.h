// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class userinfo;
class focustm;

// ===================================================================

class userinfo : public ::google::protobuf::Message {
 public:
  userinfo();
  virtual ~userinfo();

  userinfo(const userinfo& from);

  inline userinfo& operator=(const userinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const userinfo& default_instance();

  void Swap(userinfo* other);

  // implements Message ----------------------------------------------

  userinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const userinfo& from);
  void MergeFrom(const userinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);

  // optional string username = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:message.userinfo)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_username();
  inline void clear_has_username();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::google::protobuf::uint32 userid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static userinfo* default_instance_;
};
// -------------------------------------------------------------------

class focustm : public ::google::protobuf::Message {
 public:
  focustm();
  virtual ~focustm();

  focustm(const focustm& from);

  inline focustm& operator=(const focustm& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const focustm& default_instance();

  void Swap(focustm* other);

  // implements Message ----------------------------------------------

  focustm* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const focustm& from);
  void MergeFrom(const focustm& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgtype = 1;
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgtypeFieldNumber = 1;
  inline const ::std::string& msgtype() const;
  inline void set_msgtype(const ::std::string& value);
  inline void set_msgtype(const char* value);
  inline void set_msgtype(const char* value, size_t size);
  inline ::std::string* mutable_msgtype();
  inline ::std::string* release_msgtype();
  inline void set_allocated_msgtype(::std::string* msgtype);

  // repeated .message.userinfo ui = 2;
  inline int ui_size() const;
  inline void clear_ui();
  static const int kUiFieldNumber = 2;
  inline const ::message::userinfo& ui(int index) const;
  inline ::message::userinfo* mutable_ui(int index);
  inline ::message::userinfo* add_ui();
  inline const ::google::protobuf::RepeatedPtrField< ::message::userinfo >&
      ui() const;
  inline ::google::protobuf::RepeatedPtrField< ::message::userinfo >*
      mutable_ui();

  // @@protoc_insertion_point(class_scope:message.focustm)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgtype_;
  ::google::protobuf::RepeatedPtrField< ::message::userinfo > ui_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static focustm* default_instance_;
};
// ===================================================================


// ===================================================================

// userinfo

// optional uint32 userid = 1;
inline bool userinfo::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void userinfo::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void userinfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void userinfo::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 userinfo::userid() const {
  return userid_;
}
inline void userinfo::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// optional string username = 2;
inline bool userinfo::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void userinfo::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void userinfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void userinfo::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& userinfo::username() const {
  return *username_;
}
inline void userinfo::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void userinfo::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void userinfo::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* userinfo::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* userinfo::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void userinfo::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// focustm

// optional string msgtype = 1;
inline bool focustm::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void focustm::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void focustm::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void focustm::clear_msgtype() {
  if (msgtype_ != &::google::protobuf::internal::kEmptyString) {
    msgtype_->clear();
  }
  clear_has_msgtype();
}
inline const ::std::string& focustm::msgtype() const {
  return *msgtype_;
}
inline void focustm::set_msgtype(const ::std::string& value) {
  set_has_msgtype();
  if (msgtype_ == &::google::protobuf::internal::kEmptyString) {
    msgtype_ = new ::std::string;
  }
  msgtype_->assign(value);
}
inline void focustm::set_msgtype(const char* value) {
  set_has_msgtype();
  if (msgtype_ == &::google::protobuf::internal::kEmptyString) {
    msgtype_ = new ::std::string;
  }
  msgtype_->assign(value);
}
inline void focustm::set_msgtype(const char* value, size_t size) {
  set_has_msgtype();
  if (msgtype_ == &::google::protobuf::internal::kEmptyString) {
    msgtype_ = new ::std::string;
  }
  msgtype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* focustm::mutable_msgtype() {
  set_has_msgtype();
  if (msgtype_ == &::google::protobuf::internal::kEmptyString) {
    msgtype_ = new ::std::string;
  }
  return msgtype_;
}
inline ::std::string* focustm::release_msgtype() {
  clear_has_msgtype();
  if (msgtype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msgtype_;
    msgtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void focustm::set_allocated_msgtype(::std::string* msgtype) {
  if (msgtype_ != &::google::protobuf::internal::kEmptyString) {
    delete msgtype_;
  }
  if (msgtype) {
    set_has_msgtype();
    msgtype_ = msgtype;
  } else {
    clear_has_msgtype();
    msgtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .message.userinfo ui = 2;
inline int focustm::ui_size() const {
  return ui_.size();
}
inline void focustm::clear_ui() {
  ui_.Clear();
}
inline const ::message::userinfo& focustm::ui(int index) const {
  return ui_.Get(index);
}
inline ::message::userinfo* focustm::mutable_ui(int index) {
  return ui_.Mutable(index);
}
inline ::message::userinfo* focustm::add_ui() {
  return ui_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message::userinfo >&
focustm::ui() const {
  return ui_;
}
inline ::google::protobuf::RepeatedPtrField< ::message::userinfo >*
focustm::mutable_ui() {
  return &ui_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
